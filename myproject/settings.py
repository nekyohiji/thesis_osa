"""
Django settings for myproject project.
Generated by 'django-admin startproject' using Django 5.1.1.
"""

from pathlib import Path
import os
from django.core.files.storage import FileSystemStorage  # ok to keep even if unused
import dj_database_url

# --------------------------------------------------------------------------------------
# Paths
# --------------------------------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# --------------------------------------------------------------------------------------
# Core
# --------------------------------------------------------------------------------------
SECRET_KEY = os.getenv("SECRET_KEY", "dev-insecure-key")
DEBUG = os.getenv("DEBUG", "True").lower() == "true"

ALLOWED_HOSTS = [
    "127.0.0.1", "localhost",
    "tupcosa.online", ".tupcosa.online",
    ".onrender.com",
]

CSRF_TRUSTED_ORIGINS = [
    "https://tupcosa.online",
    "https://app.tupcosa.online",
    "https://*.onrender.com",
    "https://www.tupcosa.online",
]

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
USE_X_FORWARDED_HOST = True

# --------------------------------------------------------------------------------------
# Apps / Middleware
# --------------------------------------------------------------------------------------
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "myapp",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "myproject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "myapp" / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.media",
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "myapp.context_processors.user_role_context",
            ],
        },
    },
]

WSGI_APPLICATION = "myproject.wsgi.application"

# --------------------------------------------------------------------------------------
# Database
# --------------------------------------------------------------------------------------
DATABASES = {}
db_url = os.getenv("DATABASE_URL")

if db_url:
    # Cloud DB (Render, etc.)
    DATABASES["default"] = dj_database_url.config(conn_max_age=600, ssl_require=True)
elif DEBUG:
    # Local dev DB
    DATABASES["default"] = {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "osasystemdb",
        "USER": "osathesis",
        "PASSWORD": "osathesis25",
        "HOST": "localhost",
        "PORT": "3306",
    }
else:
    # Fallback only when NOT debug and no DATABASE_URL
    DATABASES["default"] = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }

# Security flags (prod only)
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True

# --------------------------------------------------------------------------------------
# Auth
# --------------------------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# --------------------------------------------------------------------------------------
# I18N
# --------------------------------------------------------------------------------------
LANGUAGE_CODE = "en-us"
TIME_ZONE = "Asia/Manila"
USE_I18N = True
USE_TZ = True

# App-specific
GMF_TEMPLATE_PATH = BASE_DIR / "myapp" / "cert_templates" / "good-moral-form.xlsx"

# --------------------------------------------------------------------------------------
# LibreOffice paths (used by myapp.apps.AppConfig.ready)
# --------------------------------------------------------------------------------------
if os.name == "nt":
    # 1) LibreOffice's embedded Python (for UNO scripts if you use them)
    DEFAULT_LO_PY = r"C:\Program Files\LibreOffice\program\python.exe"
    # 2) LibreOffice CLI binary
    win_soffice = r"C:\Program Files\LibreOffice\program\soffice.com"
    if not Path(win_soffice).exists():
        win_soffice = r"C:\Program Files\LibreOffice\program\soffice.exe"
    DEFAULT_SOFFICE = win_soffice
else:
    DEFAULT_LO_PY = None
    DEFAULT_SOFFICE = None

LIBREOFFICE_PY  = os.getenv("LIBREOFFICE_PY", DEFAULT_LO_PY)
LIBREOFFICE_BIN = os.getenv("LIBREOFFICE_BIN", DEFAULT_SOFFICE)
LIBREOFFICE_PATH = LIBREOFFICE_BIN  # alias if referenced elsewhere

# --------------------------------------------------------------------------------------
# Static / Media
# --------------------------------------------------------------------------------------
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [BASE_DIR / "myapp" / "static"]
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

MEDIA_URL = "/media/"
MEDIA_ROOT = Path(os.getenv("MEDIA_ROOT", BASE_DIR / "media"))
MEDIA_ROOT.mkdir(parents=True, exist_ok=True)
DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"

# --------------------------------------------------------------------------------------
# Email — auto-switch dev vs prod
# --------------------------------------------------------------------------------------
if DEBUG:
    # Local: don’t send; print emails to terminal
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
    DEFAULT_FROM_EMAIL = "dev@localhost"
else:
    # Production (Render): Gmail SMTP with App Password
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = "smtp.gmail.com"
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
    EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
    DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", EMAIL_HOST_USER)
    EMAIL_TIMEOUT = 20

# Optional: allow one-off override via env (e.g., filebased backend in dev)
EMAIL_BACKEND = os.getenv("EMAIL_BACKEND", EMAIL_BACKEND)

# --------------------------------------------------------------------------------------
# Logging (to console; visible in Render logs and local runserver)
# --------------------------------------------------------------------------------------
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {"simple": {"format": "%(asctime)s %(levelname)s %(name)s — %(message)s"}},
    "handlers": {"console": {"class": "logging.StreamHandler", "formatter": "simple"}},
    "loggers": {
        "django": {"handlers": ["console"], "level": LOG_LEVEL},
        "myapp": {"handlers": ["console"], "level": LOG_LEVEL, "propagate": False},
    },
}

# --------------------------------------------------------------------------------------
# Default PK
# --------------------------------------------------------------------------------------
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
